# Web server configuration
# Can be either a UNIX socket, specify 'socket' and 'mode'
# Or a network socket, specify 'host' and 'port'
# Specify the url the site may be accessed at with 'url'.
# Optionally specify results per page for paginated results with 'per_page'
web:
  url: http://saltbot.example.com/
  per_page: 10
  socket: /tmp/saltbot-app.sock
  mode: 777

# Database configuration
# SQLite:
#   Set 'engine' to 'sqlite' and 'file' to the path to the SQLite database
# PostgreSQL:
#   Set 'engine' to 'postgresql' and specify 'database' plus optionally
#   'host', 'port', 'username', 'password' if required
database:
  engine: sqlite
  file: saltbot.sqlite

# IRC configuration
# Specify server and port (no SSL), a channel to join and a nickname to use.
# The 'password' setting is optional and will be used to identify to NickServ.
# The 'owners' setting dictates who may send commands to the bot via IRC.
# Users are checked for identification by "PRIVMSG NickServ ACC <username>"
# and expecting a response like "<username> ACC 3", which works on Freenode.
irc:
  server: chat.freenode.net
  port: 6667
  channel: "#saltbot"
  password: hunter2
  nick: saltbot
  owners:
    - adamgreig

# GitHub configuration.
# Enter the same secret here as on the webhook configuration to validate the
# webhook HMAC signatures.
github:
  secret: hunter2

# Log configuration.
# Takes a dictionary in the standard Python dictConfig-based logging setup:
# https://docs.python.org/3.4/library/logging.config.html#logging-config-dictschema
# You must set disable_existing_loggers to False (or explicitly re-enable a lot
# of loggers if you know what you are doing).
# For Sentry DSNs it is recommended to use the sync transport to prevent
# losing errors when Saltbot processes die immediately upon generating an
# error.
logs:
    version: 1
    disable_existing_loggers: False
    formatters:
      standard:
        format: "[%(asctime)s.%(msecs)03.0fZ] %(levelname)s: %(name)s: %(message)s"
        datefmt: "%Y-%m-%dT%H:%M:%S"
      email:
        format: |
          %(levelname)s from logger %(name)s (thread %(threadName)s)
          Time: %(asctime)s
          Location: %(pathname)s:%(lineno)d
          Module: %(module)s
          Function: %(funcName)s
          %(message)s
    handlers:
      console:
        level: INFO
        class: logging.StreamHandler
        formatter: standard
#      file:
#        level: INFO
#        class: logging.handlers.WatchedFileHandler
#        filename: saltbot.log
#        formatter: standard
#      email:
#        level: WARNING
#        class: logging.handlers.SMTPHandler
#        mailhost: localhost
#        fromaddr: saltbot@example.com
#        toaddrs:
#          - admin@example.com
#        subject: Saltbot Log
#        formatter: email
#      syslog:
#        level: INFO
#        class: logging.handlers.SysLogHandler
#        address: /dev/log
#        facility: user
#        formatter: standard
#      sentry:
#        level: ERROR
#        class: raven.handlers.logging.SentryHandler
#        dsn: "sync+http://public:secret@example.com/1"
    root:
      level: DEBUG
      handlers:
        - console


# Command configuration
commands:
  # Ship command
  # The 'it' key gives the full target when the command is "ship it",
  # the 'target' key gives the target template, use {} to indicate the
  # position of the target supplied by the user.
  # You can set expr_form which is used for all ship commands, default glob.
  ship:
    it: "*.vm.example.com"
    target: "{}.vm.example.com"
    expr_form: glob

# Repository configuration.
# 
# For each top level hash, the key specifies the full name of a GitHub repo.
# For example, "adamgreig/saltbot".
# 
# Inside that repository's configuration, each key specifies a branch of that
# repository, for example "master".
# 
# For each branch, specify a target, which may be a string or a list of
# strings, and an expr_form, which is one of:
# glob, pcre, list, grain, grain_pcre, pillar, nodegroup, range, or compound
# expr_form defaults to 'glob', which is the `salt' shell default.
#
# Optionally specify wait_gitfs: true to have this target wait for the next
# gitfs refresh before running (e.g. if the repository is your salt states).
#
# When a push comes in to a branch on a repository configured here, saltbot
# runs state.highstate on the given target with expr_form set as configured.
repos:
  "adamgreig/saltbot":
    master:
      target:
        - adam0
        - adam1
      expr_form: list
    branch2:
      target: "adam[0-9]"
      expr_form: pcre
      wait_gitfs: true
    branch3:
      target: adam*
