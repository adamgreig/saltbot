# Web server configuration
# Can be either a UNIX socket, specify 'socket' and 'mode'
# Or a network socket, specify 'host' and 'port'
# Specify the url the site may be accessed at with 'url'.
# Optionally specify results per page for paginated results with 'per_page'
web:
  url: http://saltbot.example.com/
  per_page: 10
  socket: /tmp/saltbot-app.sock
  mode: 777

# Database configuration
# SQLite:
#   Set 'engine' to 'sqlite' and 'file' to the path to the SQLite database
# PostgreSQL:
#   Set 'engine' to 'postgresql' and specify 'database' plus optionally
#   'host', 'port', 'username', 'password' if required
database:
  engine: sqlite
  file: saltbot.sqlite

# IRC configuration
# Specify server and port (no SSL), a channel to join and a nickname to use.
# The 'password' setting is optional and will be used to identify to NickServ.
# The 'owners' setting dictates who may send commands to the bot via IRC.
# Users are checked for identification by "PRIVMSG NickServ ACC <username>"
# and expecting a response like "<username> ACC 3", which works on Freenode.
irc:
  server: chat.freenode.net
  port: 6667
  channel: "#saltbot"
  password: hunter2
  nick: saltbot
  owners:
    - adamgreig

# GitHub configuration.
# Enter the same secret here as on the webhook configuration to validate the
# webhook HMAC signatures.
github:
  secret: hunter2

# Log configuration.
logs:
  levels:
    stderr: "INFO"
    file: "NONE"
    email: "NONE"
  file: saltbot.log
  email:
    to:
      - saltbot@example.com
    from: saltbot@example.com
    server: localhost


# Repository configuration.
# 
# For each top level hash, the key specifies the full name of a GitHub repo.
# For example, "adamgreig/saltbot".
# 
# Inside that repository's configuration, each key specifies a branch of that
# repository, for example "master".
# 
# For each branch, specify a target, which may be a string or a list of
# strings, and an expr_form, which is one of:
# glob, pcre, list, grain, grain_pcre, pillar, nodegroup, range, or compound
# expr_form defaults to 'glob', which is the `salt' shell default.
#
# Optionally specify wait_gitfs: true to have this target wait for the next
# gitfs refresh before running (e.g. if the repository is your salt states).
#
# When a push comes in to a branch on a repository configured here, saltbot
# runs state.highstate on the given target with expr_form set as configured.
repos:
  "adamgreig/saltbot":
    master:
      target:
        - adam0
        - adam1
      expr_form: list
    branch2:
      target: "adam[0-9]"
      expr_form: pcre
      wait_gitfs: true
    branch3:
      target: adam*
